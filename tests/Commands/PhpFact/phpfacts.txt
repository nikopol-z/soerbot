В PHP хорошо развито ООП, на уровне Java/C#: interface, abstract class, class, implements, extends, private, public, protected.
Помимо развитого ООП в PHP поддерживаются Трейты (trait), они же примеси или миксины.
На PHP можно писать и функциональный код, есть функции высшего порядка, замыкания, map/filter/reduce, и даже книга с описанием продвинутых техник (аппликативы, функторы, монады): "Functional Programming in PHP" http://www.functionalphp.com/.
Анонимные функции появились в PHP на 5 лет раньше, чем в Java: июнь 2009 PHP 5.3 vs март 2014 Java 8.
В PHP есть генераторы (ключевое слово yield) и библиотеки реализующие кооперативную многозадачность (корутины) https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html.
Регулярные выражения в PHP под капотом используют проверенную временем библиотеку [PCRE](http://www.pcre.org), что гораздо быстрее, чем собственные реализации в других языках, например, Go: http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=regexdna
В PHP есть специальная оптимизация для работы с MySQL, уменьшающая копирование памяти между процессами: вместо libmysql (стандартная библиотека-клиент) реализован так называемый MySQL Native Driver. Было: MySQL -> libmysql -> память процесса PHP; Стало: MySQL -> память процесса PHP http://jpauli.github.io/2014/07/21/php-and-mysql-communication-mysqlnd.html
Для PHP всегда найдётся актуальный драйвер к вашей любимой СУБД: MySQL, PostgreSQL, SQL Server, Oracle, Firebird, Informix, DB2, SQLLite, MongoDB, Redis, RethinkDB...
[Doctrine](https://ru.wikipedia.org/wiki/Doctrine) - мощная и самая популярная ORM для PHP, которая элегантно реализует многие идеи из Hibernate (Java).
В PHP строки можно использовать как массив байт - аля Python 2. В Python 3 это поменялось - строки стали юникодными, а для работы с байтами используйте отдельный тип, что вызвало не мало проблем при переходе и усугубило раскол сообщества. В PHP тоже планировали перейти на юникодные строки (в не вышедшей версии PHP 6), но не перешли! Работать с юникод строками можно через специальный набор функций, например strlen() vs mb_strlen().
PHP - язык с динамической типизацией, но вы можете расставить типы перед аргументами функций и указать типы возвращаемых значений (включая примитивные типы, интерфейсы и классы), тем самым получив все преимущества статически-типизированных языков. В добавок, если указать конструкцию ``declare(strict_types=1)``, типизация станет ещё и сильной (без приведения int -> float и т.п.)!
PhpStorm - это IDE основанная на Intellij IDEA, которая по богатству фич и поддержке экосистемы языка уступает лишь самой IDEA для Java. Остальные продукты в линейке (WebStorm, RubyMine, PyCharm) явно менее продвинутые, в том числе из-за сложности статического анализа очень уж динамических языков JavaScript, Ruby и Python. В плане возможностей для статического анализа PHP ближе к Java. А хорошая IDE дорогого стоит!
Xdebug - дебаггер и профайлер для PHP, который отлично интегрируется в JetBrains PhpStorm. Стек вызова, состояние переменных, eval - есть всё, что нужно в для продуктивной отладки!
В процессе разработки на PHP не нужно постоянно перезапускать сервер приложения, новый код из изменённых файлов подтянется автоматически. Разработка на PHP в стиле «подумать, отредактировать и перезагрузить страницу» делает разработчиков более продуктивными.
Существует заблуждение, что на каждый запрос PHP заново интерпретирует весь код. На самом деле при первом обращении исходники компилируются в байт-код, который сохраняется в памяти Opcache. При последующих обращениях используется уже закешированный байт-код. По умолчанию проверка исходников на наличие новых происходит не чаще чем раз в 2 секунды, но эту проверку можно вообще отключить и всегда использовать скомпилированный и закешированный байт-код.
Ежемесячно в блоге JetBrains выходит дайджест PHP Annotated Monthly https://blog.jetbrains.com/phpstorm/category/php-annotated-monthly/ (аналогичные публикации от JetBrains есть ещё только по теме Java Annotated Monthly).